{
  "language": "Solidity",
  "sources": {
    "contracts/Lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nerror Lottery__UnAuthorized();\nerror Lottery__NeedToSendCorrectAmount();\nerror Lottery__TransferFailed();\nerror Lottery__NotOpen();\nerror Lottery__UpKeepNotNeeded(\n    uint256 _lotteryBalance,\n    uint256 _numberOfPlayers,\n    uint256 _lotteryState\n);\n\n// import \"hardhat/console.sol\";\n\n// Chainlink VRF v2\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n// Chainlink Keeper (\"Automation\")\nimport \"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\";\n\n/** @title A sample Lottery contract\n * @author SiegfriedBz\n * @notice This contract is for creating an untamperable decentralized Lottery smart contract\n * @dev This implements Chainlink VRF v2 and Chainlink Keeper (\"Automation\")\n * @notice User can enter Lottery by sending ETH\n * @notice Chainlink VRF will pick a random number\n * @notice Chainlink Keeper will call the function to pick a winner\n */\n\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\n    /* Type Declaration */\n    enum LotteryState {\n        OPEN,\n        CALCULATING\n    }\n\n    /* State Variables */\n    address private immutable i_owner;\n    uint256 private immutable i_fee;\n    address payable[] private s_players;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // VRF -- https://docs.chain.link/docs/vrf/v2/subscription/examples/get-a-random-number/\n    bytes32 private immutable i_gasLane; // VRF -- gasLane -- eg: goerli \"30 gwei Key Hash\" https://docs.chain.link/docs/vrf/v2/subscription/supported-networks/#configurations\n    uint64 private immutable i_subscriptionId; // VRF -- -- eg: goerli https://vrf.chain.link/goerli\n    uint32 private immutable i_callbackGasLimit; // VRF\n    uint16 private constant REQUEST_CONFIRMATIONS = 3; // VRF\n    uint32 private constant NUMWORDS = 1; // VRF\n\n    /* Lottery Variables */\n    address payable private s_newWinner;\n    LotteryState private s_lotteryState;\n    uint256 private immutable i_interval; // KEEPER\n    uint256 private s_lastTimeStamp;\n\n    /* Events */\n    event LotteryEntered(address indexed _player);\n    event RandomWinnerRequested(uint256 indexed _requestId);\n    event WinnerPicked(address indexed s_newWinner);\n\n    modifier onlyOwner() {\n        if (i_owner != msg.sender) {\n            revert Lottery__UnAuthorized();\n        }\n        _;\n    }\n\n    constructor(\n        uint256 _fee,\n        address _vrfCoordinator,\n        bytes32 _gasLane,\n        uint64 _subscriptionId,\n        uint32 _callbackGasLimit,\n        uint256 _interval\n    ) VRFConsumerBaseV2(_vrfCoordinator) AutomationCompatibleInterface() {\n        i_owner = msg.sender;\n        i_fee = _fee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\n        i_gasLane = _gasLane;\n        i_subscriptionId = _subscriptionId;\n        i_callbackGasLimit = _callbackGasLimit;\n        s_lotteryState = LotteryState.OPEN;\n        i_interval = _interval;\n        s_lastTimeStamp = block.timestamp;\n    }\n\n    /**\n     * @dev function called by the ChainLink Keeper (\"Automation\") nodes\n     * They look for \"upkeepNeeded\" to return true\n     * To return true the following is needed\n     * 1. Lottery is in \"open\" state (\"closed\" when waiting for a random number from Chainlink VRF)\n     * 2. Time interval has passed\n     * 3. Lottery has >= 1player, and Lottery is funded\n     * 4. ChainLink subscription has enough LINK\n     */\n    function checkUpkeep(\n        bytes memory /* checkData */\n    )\n        public\n        view\n        override\n        returns (\n            bool upkeepNeeded,\n            bytes memory /* performData */\n        )\n    {\n        bool isOpen = s_lotteryState == LotteryState.OPEN;\n        bool timePassed = (block.timestamp - s_lastTimeStamp) > i_interval;\n        bool hasPlayer = s_players.length > 0;\n        bool isFunded = address(this).balance > 0;\n        upkeepNeeded = (isOpen && timePassed && hasPlayer && isFunded);\n    }\n\n    /**\n     * @dev function called by the ChainLink Keeper (\"Automation\") nodes\n     * when checkUpkeep() return true\n     */\n    function performUpkeep(\n        bytes memory /* performData */\n    ) external override {\n        //upkeep revalidation\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n        if (!upkeepNeeded) {\n            revert Lottery__UpKeepNotNeeded(\n                address(this).balance,\n                s_players.length,\n                uint256(s_lotteryState)\n            );\n        }\n        s_lastTimeStamp = block.timestamp;\n\n        // call on i_vrfCoordinator contract to request the random number\n        s_lotteryState = LotteryState.CALCULATING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUMWORDS\n        );\n        emit RandomWinnerRequested(requestId);\n    }\n\n    function fulfillRandomWords(\n        // override VRFConsumerBaseV2.sol\n        uint256, /* requestId */\n        uint256[] memory randomWords\n    ) internal override {\n        uint256 indexOfWinner = randomWords[0] % s_players.length; // randomWords[0] : we expect only 1 word (NUMWORDS = 1;) and we want a random number that belongs to [0, players.length]\n        address payable newWinner = s_players[indexOfWinner];\n        s_newWinner = newWinner;\n        s_players = new address payable[](0);\n        s_lotteryState = LotteryState.OPEN;\n        (bool success, ) = s_newWinner.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert Lottery__TransferFailed();\n        }\n        emit WinnerPicked(s_newWinner);\n    }\n\n    /**\n     * @notice\n     * adds msg.sender to the players array\n     */\n    function enterLottery() external payable {\n        if (s_lotteryState != LotteryState.OPEN) {\n            revert Lottery__NotOpen();\n        }\n        if (msg.value != i_fee) {\n            revert Lottery__NeedToSendCorrectAmount();\n        }\n        s_players.push(payable(msg.sender));\n        emit LotteryEntered(msg.sender);\n    }\n\n    /* View/Pure functions */\n    /**\n     * @notice Getter for front end\n     * returns the entrance fee\n     */\n    function getFee() public view returns (uint256) {\n        return i_fee;\n    }\n\n    /**\n     * @notice Getter for front end\n     * returns the players array\n     */\n    function getPlayers() public view returns (address payable[] memory) {\n        return s_players;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getNewWinner() public view returns (address) {\n        return s_newWinner;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getLotteryState() public view returns (uint256) {\n        return uint256(s_lotteryState);\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getInterval() public view returns (uint256) {\n        return i_interval;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getLatestTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getRequestConfirmations() public pure returns (uint256) {\n        return REQUEST_CONFIRMATIONS;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getNumWords() public pure returns (uint256) {\n        return NUMWORDS;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}